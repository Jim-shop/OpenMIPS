package openmips.test

import chisel3._
import chiseltest._
import chisel3.experimental.BundleLiterals._

import utest._

import openmips.Cpu
import openmips.Params

object CpuSpec extends ChiselUtestTester {
  val tests = Tests {
    def runOnCpu(cpu: Cpu, insts: Seq[String]) = {
      for (i <- 0 until insts.length) {
        val inst = insts(cpu.debug.pc_val.peekInt().toInt)
        cpu.io.romRead.data.poke(inst.U)
        println(s"[Cycle ${i}] Emit: ${inst}")
        // Seq(
        //   "pc" -> cpu.debug.pc_val,
        //   "ifInst" -> cpu.debug.ifInst_val,
        //   "aluOp" -> cpu.debug.aluOp_val,
        //   "aluSel" -> cpu.debug.aluSel_val,
        //   "wb" -> cpu.debug.wb_val
        // ).map {
        //   case (name, port) =>
        //     val out = port.peekInt().toString(16)
        //     println(s"${name}: ${out}")
        // }
        cpu.clock.step()
        for ((reg, index) <- cpu.debug.reg.zipWithIndex) {
          val value = reg.peekInt()
          if (value != 0)
            print(s"$$${index}: ${value.toString(16)} ")
        }
        println()
      }
    }
    test("ori") {
      testCircuit(new Cpu) { cpu =>
        runOnCpu(
          cpu,
          Seq(
            "b00000000000000000000000000000000",
            "b00110100000000010001000100000000",
            "b00110100000000100000000000100000",
            "b00110100000000111111111100000000",
            "b00110100000001001111111111111111",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000"
          )
        )
      }

    }
    test("数据前推") {
      testCircuit(new Cpu) { cpu =>
        runOnCpu(
          cpu,
          Seq(
            "b00000000000000000000000000000000",
            "b00110100000000010001000100000000",
            "b00110100001000010000000000100000",
            "b00110100001000010100010000000000",
            "b00110100001000010000000001000100",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000"
          )
        )
      }
    }
    test("LogicInstTest") {
      testCircuit(new Cpu) { cpu =>
        runOnCpu(
          cpu,
          Seq(
            "b00000000000000000000000000000000",
            "b00111100000000010000000100000001",
            "b00110100001000010000000100000001",
            "b00110100001000100001000100000000",
            "b00000000001000100000100000100101",
            "b00110000001000110000000011111110",
            "b00000000011000010000100000100100",
            "b00111000001001001111111100000000",
            "b00000000100000010000100000100110",
            "b00000000100000010000100000100111",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000"
          )
        )
      }
    }
    test("ShiftInstTest") {
      testCircuit(new Cpu) { cpu =>
        runOnCpu(
          cpu,
          Seq(
            "b00000000000000000000000000000000",
            "b00111100000000100000010000000100",
            "b00110100010000100000010000000100",
            "b00110100000001110000000000000111",
            "b00110100000001010000000000000101",
            "b00110100000010000000000000001000",
            "b00000000000000000000000001001111",
            "b00000000000000100001001000000000",
            "b00000000111000100001000000000100",
            "b00000000000000100001001000000010",
            "b00000000101000100001000000000110",
            "b00000000000000000000000000000000",
            "b00000000000000100001010011000000",
            "b00000000000000000000000001000000",
            "b00000000000000100001010000000011",
            "b00000001000000100001000000000111",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
            "b00000000000000000000000000000000",
          )
        )
      }
    }
  }
}
