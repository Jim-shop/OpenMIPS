// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// VCS coverage exclude_file
module mem_combMem(	// Rom.scala:14:24
  input  [16:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:131070];	// Rom.scala:14:24
  reg        _GEN;	// Rom.scala:14:24
  reg [16:0] _GEN_0;	// Rom.scala:14:24
  always @(posedge R0_clk) begin	// Rom.scala:14:24
    _GEN <= R0_en;	// Rom.scala:14:24
    _GEN_0 <= R0_addr;	// Rom.scala:14:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// Rom.scala:14:24
    `ifdef RANDOMIZE_MEM_INIT	// Rom.scala:14:24
      integer initvar;	// Rom.scala:14:24
      reg [31:0] _RANDOM_MEM;	// Rom.scala:14:24
    `endif // RANDOMIZE_MEM_INIT
    `ifdef RANDOMIZE_REG_INIT	// Rom.scala:14:24
      reg [31:0] _RANDOM;	// Rom.scala:14:24
    `endif // RANDOMIZE_REG_INIT
    initial begin	// Rom.scala:14:24
      $readmemb("C:\\Users\\Jim\\Desktop\\OpenMIPS\\src\\test\\rom\\ori.data", Memory);	// Rom.scala:14:24
      `INIT_RANDOM_PROLOG_	// Rom.scala:14:24
      `ifdef RANDOMIZE_MEM_INIT	// Rom.scala:14:24
        for (initvar = 0; initvar < 131071; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// Rom.scala:14:24
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// Rom.scala:14:24
        _RANDOM = {`RANDOM};	// Rom.scala:14:24
        _GEN = _RANDOM[0];	// Rom.scala:14:24
        _GEN_0 = _RANDOM[17:1];	// Rom.scala:14:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = _GEN ? Memory[_GEN_0] : 32'bx;	// Rom.scala:14:24
endmodule

module Rom(	// <stdin>:3:10
  input         clock,	// <stdin>:4:11
                reset,	// <stdin>:5:11
  input  [31:0] io_addr,	// <stdin>:6:12
  input         io_ce,	// <stdin>:6:12
  output [31:0] io_data	// <stdin>:6:12
);

  wire [31:0] _mem_ext_R0_data;	// Rom.scala:14:24
  mem_combMem mem_ext (	// Rom.scala:14:24
    .R0_addr (io_addr[16:0]),	// Rom.scala:18:19
    .R0_en   (io_ce),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data)
  );
  assign io_data = io_ce ? _mem_ext_R0_data : 32'h0;	// <stdin>:3:10, Rom.scala:14:24, :17:15, :18:13, :20:13
endmodule

